Class:

A class is a template or a blueprint to create objects. It contains states called variables and behaviors called methods.
If we consider a Vehicle as an example, Vehicle has states or attributes such as number of wheels, speed, and type of fuel etc., 
Also has behaviors like start, break and park.

Object:

An object is an instance of class. It is an entity created by following the rules mentioned in the class.
For our example Vehicle class, We can create an object called car which has its own data for variables and methods.
The variables store data and methods performs a dedicated task by executing its statements.

Class modifiers:

 A class can be declared as public or default. 
 A java file can have any number of classes but with only one public class which has same name as file and contain main method.
 A class can be declared by using class keyword and preceeding with access modifier.
 Declaring a class without its modifier is default modifier.

 Class member modifiers:

 There are 4 kinds of data access modifiers.
 1. public
 2. protected
 3. default
 4. private

 public members can be accessed within the class, within the package and out of the package. It has wider scope.
 protected members can be accessed within the class, within the package and out of the package through sub classes only.
 default members can be accessed within the class and within the package. Its has package level scope.
 private members can be accessed within the class only.

 Abstract:

 Abstraction is the process of hiding unnecessary details and showing needed information.
 Abstract class is a class which is declared with Abstract keyword.
 An abstract class cannot be instantiated.
 Abstract class can have abstract and non abstract methods.
 Abstract method is declared with abstract keyword and does not contain implementation.
 The sub class of abstract class must implement all the abstract methods from the super class.
 Example:
 startVehicle():
    Various Vehicles has their own way of starting them. 
    A bike can be started with a kick.
    A car can be started with a key.

Interfaces:

 An interface is a fully abstract class in java.
 It is used to achieve abstraction.
 We can't create object for an interface.
 Interface contains methods without implementation.
 It can have static and default methods.
 Defualt methods can be declared with a default keyword.
 Interface can extend multiple interfaces to achieve multiple inheritance.
 One class can implement multiple interfaces.
 The class which implements an interface should implement all the unimplemented methods of the interface.
 All the methods in interface by default public. It can have private methods also.

Methods with variable length argument:

 A method can accept different number of parameters of same type.
 Example:   add(int ...elements)
 elements can represented as array of integer type.
 The variable argument must be the last parameter of the method.
 A method can only contain atmost one variable argument and can have any number of parameters.

Constructor:

 A constructor is a method which has the same name as the Class in which it is declared.
 A constructor can't have a return type.
 Constructor is automatically executed when object is created with that constructor.
 The constructor of that class can be called with this keyword and appropriate parameters.
 The super class constructor from the subclass can be called with super keyword and required parameters.
 When we don't declare any constructor for a class Java compiler automatically creates a default constructor without parameters.
 Default constructor initiates default values for the instance variables.

Constructor overloading:

 Constructors with different arguments is called Constructor overloading.
 It is same as method overloading except that Constructors won't have return type.
 Constructor can be overloaded if number of arguments or the type of arguments are different with others.
 
Primitive Data Types: and their default values.

 There are 8 primitive data types in java.

 byte:
    It is used when we want work with small range of integers between -128 to 127.
    It takes 1 byte of memory.
    The default value is 0.
 short:
    Short data type can store the values of range -2^15 to (2^15)-1.
    It takes 2 bytes of memory.
    The default value is 0.
 int:
    int can be used to store data of range -2^31 to (2^31)-1.
    it takes 4 bytes of memory.
    The default value is 0.
 long:
    Variable of long type can store data in between -2^63 to (2^63)-1.
    it takes 8 bytes of memory.
    The default value is 0L.
 float:
    float is used to store decimal values with single precision.
    It takes 4 bytes to store data.
    The default value is 0.0f.
 double:
    double can store decimal values with double precision.
    it takes 8 bytes of memory.
    The default value is 0.0d.
 char:
    char data type is used to store characters.
    the range of char data type is 0('\0000') to 65535 ('\uffff').
    it takes 2 bytes of memory.
    the default value is '\u0000'.
 boolean:
    boolean can store either true or false.
    Its size can'nt be defined precisely.
    the default value is false.

Instance variables:
 These are non-static variables of a class.
 These variables can store different values from object to object.
 These variables coupled with objects.

Class Variables:
 These are static varialbes of a class.
 These variables share same memory for all the objects of the class.
 Class variables belongs to classes rather than objects.
 Generally used to store global data of all the objects.
 These variables can be directly accessed with class name.

Local variables:
 Local variables are declared in methods.
 The scope of a local variable is within the method where it is declared.
 Generally these variables store temporary states of the object.

static keyword:
 It is a keyword which is used to share the same variable or method of a given class.
 It defines that the members belong to classes rather than objects.
 It improves code reusability.
static variable:
 static is used for a variable that is same for every instance of a class.
 It reduces memory by sharing same variable for its objects.

static method:
 A static method can be called without cretaing an instance.
 These methods have same implementation for all its objects.
 A static method can only work with static data (variables).

static class:
 A nested class can be a static.
 A static class does not have access to the instance variables and methods of the outer class.
 Static classes are sealed and therefore cannot be inherited.
 These classes improves the security.
 They cannot inherit from other classes except Object.

static block:
 The logic to be executed during the class loading before executing the main() method can be in a static block. 
 Static blocks are mainly used to initialize the static variables.
 These blocks are executed only once when class loaders load the class.

Instance variables:

 These are non-static variables of a class.
 These variables can store different values from object to object.
 These variables coupled with objects.

Class Variables:

 These are static varialbes of a class.
 These variables share same memory for all the objects of the class.
 Class variables belongs to classes rather than objects.
 Generally used to store global data of all the objects.
 These variables can be directly accessed with class name.

Local variables:

 Local variables are declared in methods.
 The scope of a local variable is within the method where it is declared.
 Generally these variables store temporary states of the object.

Primitive Type Casting:

 The conversion of data from one type to another type is called type casting.

 Widening:
    It is the process of converting smaller types into a larger type.
    It is automatically done.
    Also known as implicit type casting.
    There is no chance of loosing actual data as the destination is larger one.
    byte -> short -> char -> int -> long -> float -> double

 Narrowing:
    It is the process of converting larger types into a smaller type.
    Programmer should manually type cast.
    Also known as explicit type casting.
    There are chances of loosing actual data as the destination is smaller.
    double -> float -> long -> int -> char -> short -> byte

Wrapper class:

 A class that wraps primitive data is called wrapper class.
 Wrapper classes help a Java program be completely object-oriented. 
 The primitive data types in java are not objects, by default. 
 They need to be converted into objects using wrapper classes.
 Generic classes only work with objects and don't support primitives.
 Wrapper classes are useful for synchronization in multithreading. 
 The synchronization process allows only one thread to use a shared resource at a time.
 There are 8 wrapper classes for respective primitive types.
 Byte, Short, Integer, Long, Float,Double,Character and Boolean.

 
 Autoboxing:
    Conversion of primitive into an object.

 Unboxing:
    Conversion of object into a primitive.

Arrays:

 Array is a collection of similar types of data.
 The size of the array is fixed.
 Array can be declared as shown below,
   type[] variable;
   type []variable;
   type variable[];
 Each element in an array can be accessed with an index.
 index starts from 0.
 Array can be initialized at declaration.
   int[] arr = {1,2,3};
 Array can be declared with new keyword.
   int arr[] = new int[4];
 Here array can hold maximum of 4 elements.
 Multi-dimentional array:
   A multi-dimentional array is an array of arrays.
   It can be declared as follows
      int[][] arr = {
         {1,2,3},
         {1,2,3},
         {1,2,3}
      }
 Jagged array:
   Jagged array is a multidimensional array where nested arrays are of different size.
   ex:
   int[][] arr = {
      {1,2,3},
      {1,2},
      {1,2,3,4,5}
   }

Passing Varialbes to methods by Reference and value:
 Java doesn't support pass by reference for primitive types.
 Pass by value:
   In this kind of method call, 
   If the value of parameter changed in the method, it will not effect the variable value by which it is called.
   Calling a method with primitive types is a pass by value.
 Pass by reference:
   Java does not supports pass by reference, but we can achieve it for the objects and arrays.
   The objects are created in heap and a reference variable stores it's reference.
   When a method is called with these objects then the references are copied and passed to the methods.
   The changes of the parameter objects through reference in the method will reflect in the object by which it is called.
   Because both variables are refering to same.
   If reference is changed in method, then the changes will not effect original object.