Operators:
    Operators are symbols that perform operations on variables and values.
    There are different operators in java.

    Arithmetic Operators:
        Arithmetic operators are used to perform arithmetic operations on variables and data.
        +  performs the addition operation
        -  performs the subtraction operation
        *  performs the multiplication operation
        /  performs the division operation
        %  performs the modulo operation. performs division and returns remainder.

    Assingment Operators:
        Assignment operators are used to assign values to variables.
        = assigns the value of a variable or the data to the variable left of the operator.
        += adds and assigns the value.
        -= subtracts and assigns the value.
        *= multiplies and assigns the value.
        /= division and assigns the value.
        %= performs modulo and assigns the value.

    Relational Operators:
        These operator checks the relationship between(compares two) two operands.
        == returns true if both operands are equal.
        != returns tru if both operands are not equal.
        > returns true if L.H.S. operand is greater.
        < returns true if R.H.S. operand if greater.
        >= returns true if L.H.S. operand is greater or equal to another.
        <= returns true if R.H.S. operand is greater or equal to another.

    Logical Operators:
        Logical operators are used to check whether an expression is true or false.
        && returns true if both expressions are true.
        || returns true if any of the expressions is true.
        !  returns true if the expression is false.

    Increament Operator:
        The increament operator increases the value of the operand by 1.
        post increament:
            It increments the value before assigning it to another operand.
        pre increament:
            It increments the value after assigning it to another operand.

    Decrement Operator:
        The decrement operator decreases the value of the operand by 1.
        post decrement:
            It decrements the value before assigning it to another operand.
        pre decrement:
            It decrements the value after assigning it to another operand.

    Ternary Operator:
        One expression is executed if the condition is true otherwise another expression will be executed.
        It shorthands the simple if-else statement.
        variable = condition ? expression1 : expression2;

Flow Control:
    Simple if:
        It is a simple statement like if-then.
        a block of code is executed if the condition is true.
        if(condition){
            ....
        }
    if else:
        It is a Conditional statement follows if-then and otherwise.
        A block of code is executed if the condition is true.
        Otherwise another block of code is executed.
        if(condition){
            .....
        }
        else{
            .....
        }
    if else ladder:
        It follows a ladder method.
        A block is executed if the condition is true.
        The conditions are checked from top if block.
        If any of the condition true then that particular code is executed.
        If all the conditions are false else block will be executed.
        if(condition1){
            .....
        }
        else if(condition2)
        {
            .....
        }
        else if(condition3){
            .....
        }
        else{
            .....
        }

    Switch statement:
        The switch statement allows us to execute a block of code among many alternatives.
        The expression is evaluated once and compared with the values of each case.
        One case can be executed among all if the value matches with case.
        Otherwise default will be executed.
        The Java switch statement only works with byte, short, char, int, Enumerated types, String Class, Character, Byte, Short, and Integer.
        
    While:
        while loop is used to run a specific code until a certain condition is true.
        The expression is evaluted first and if the condition is true then only the code inside the loop will be executed.
        This process continues till the condition becomes false.

    do while:
        The body of do-while loop is executed once before the condition is checked.
        From second iteration onwards if the condition is true then only the code inside the loop will be executed.
        This process continues till the condition becomes false.
        while and do...while loops are generally used when the number of iterations is unknown.

    for:
        The for loop is used when the number of iterations is known.
        for loop contains initialization, condition and update expression.
        initialization executes only once and used to declare or initialize variables.
        condition will be executed before every iteration.
        update expression will be executed after every iteration to update the variables declare in initialization.
        
    for-each:
        for-each loop is used to iterate through elements of arrays and collections.
        for each has type, item, and collection/array.
    
    break:
        break statement terminates the loop immediately and control goes to the next statement after the loop.
        It is better to use with conditional statements.
        The break statement is also used to terminate cases inside the switch statement.
        If we are using break in nested loop, then break can terminate inner loop.

    continue:
        The continue statement skips or continues the current iteration of a loop.
        Once continue statement executed control goes to the starting of the loop and condition is evaluated and continues the execution.
        It is better to use with control statements.
        It will leads to an infinite loop if the variable affects expression does not upgrades before the continue.

Exception Hierarchy:

Throwable:
    Throwable class is the subclass of Object and super class for Exception and Error.
    Objects of Throwable or objects of it's subclasses can only thrown by JVM or with java throw keyword.
    Argument of catch can only either Throwable or its subclass.

Errors:
    Errors are usually caused by serious problems that are outside the control of the program, such as running out of memory or a system crash.
    Errors are irrecoverable and can cause due to JVM running out of memory, memory leaks, stack overflow errors, library incompatibility.
    We cannot handle Errors.

Exceptions:
    Exceptions are the events that occurs unexpectedly during the program execution.
    These Exceptions terminate the execution abnormally.
    We can handle Exceptions.

    Exceptions are two types Checked exceptions and unchecked exceptions.
    Checked Exceptions checked by the compiler at the compile time. 
    compiler represents a predictable, erroneous situation that can occur.
    These exceptions require catching or declaration of Exceptions with throws keyword.
    Example:
    IOException, ClassNotFoundException,SQLException,FileNotFoundException etc., 

    Runtime exceptions occur at runtime.
    An unchecked exception is a programming error.
    Compiler can't anticipate logical errors that arise only at runtime.
    Example:
    ArithmeticException, IndexOutOfBoundsException, NullPointerException etc.,

Exception Handling:
    Exceptions can be caught and handled.
    Whenever exception occurs JVM creates an object for exception and throws it.
    We can define our own exceptions by creating a class which extends Exception class.
    Exceptions abnormally terminate the execution. So we need to catch them for normal execution/termination.
    
    try{
        ....
    }
    catch(Exception e){
        ....
    }
    finally{
        ....
    }

    try:
        try block contains the code where the exception is expected to occur.

    catch:
        catch block contains the code to execute when the specified exception is occured.
        catch block cannot be written without a try.
        catch block should define specific to generic exception in order to handle multiple exceptions.
        if catch block for Exception is declared on the top the same catch block will be executed for all the exceptions.

    finally:
        if exceptoion is occured finally block executes after try and catch block.
        otherwise it executes after try block.
        finally block executes if exception was occured or not.
        finally executes even if we don't catch the exception.
        finally cannot be written without a try.
        Generally used to write cleanup code.

    throw:
        throw keyword is used to explicitly throw an exception.
        When we throw an exception respected catch block will be executed.
        when we throw an exception it should be either catched or the method where it is called should declare the Exception with throws keyword.

    throws:
        throws keyword is used to declare the exceptions that might occur in the method.
        It is used in the method declaration.
        It hands over the Exception to the method where it is called.
    
    Propagation of Uncaught Exceptions:
        When an Exception occured propagation us the process controls the flow from top to bottom of the stack.
        If the Exception is not caught it drops down to previous method until the Exception is caught or it drops to the bottom of the stack.


Strings:
    String is a sequence of characters. It is class in java.
    String class is immutable.
    That means once we create an object we cannot change it.
    Beacause of the security, synchronization and concurrency, caching, and class loading.
    The string object can be created by two ways.
    Using string literal, In this process the string object is created in java String pool which is in heap memory.
    It returns the same object if it is already exists.Otherwise, it will create a new String object.
    Using the new keyword, it always creates a new object in heap memory.

String methods:
    length()
        returns the number of characters in the string.
    charAt()
        returns the character at specified index.
    concat()
        Concatenates or joins the string with another returns a new string.
    contains()
        returns true if the string specified charsequence. Otherwise returns false.
    compareTo()
        returns difference of respective characters from two strings.
    compareToIgnoreCase()
        returns difference of respective characters from two strings by ignoring case.
    equals()
        returns true if two strings contains same data.
    equalsIgnoreCase(String another)
        returns true if two strings contains same data irrespective of case.
    indexOf()
        returns index of the string where the specified character or substring presents.
        returns -1 if not not present.
        it can have from index value where search can start from.
    lastIndexOf()
        returns index of the string where the specified character or substring present from the last.
        returns -1 if not not present.
        it can have from index value where search can start from.
    substring()
        returns a string from specified start index to the specified last index-1.
        if there is no last index goes till the end.
    replace()
        returns a string by replacing each old character/substring with new one.
    replaceAll()
        returns a string by replacing each substring which matches specified regex with new one.
    replaceFirst()
        returns new String by replacing first occured old substring with new one.
    toLowerCase()
        returns new string in lowecase format.
    toUpperCase()
        returns new string in uppercase format.
    endsWith()
        returns true if the string ends with specified substring.
    startsWith()
        returns true if the string starts with specified substring.
    isEmpty()
        returns true if length is 0.
    toCharArray()
        returns an array of characters from the string.
    jon()
        returns a string by joining vararg Strings with the delimeter.
    trim()
        returns a new string by removing leading or trailing spaces.
    split()
        returns a string array by splitting the string where specified regex is matched.

StringBuffer:
    StringBuffer objects are mutable.
    We can change the data once we  create the StringBuffer object.
    The StringBuffer does not overrides the equal().
    All the public methods of StringBuffer are synchronized.
    It means when one thread is executing a method, another thread cannot enter the method to execute.
    This feature reduces the performance but mostly used in the security while working with multiple threads to prevent data inconsistancy.
    It has the initial buffer capacity of 16.
    we can increase the capacity manually with ensureCapacity().
    The capacity grows by (old capacity * 2)+2 as length reaches capacity.
    We have the following classes in StringBuffer.

    capacity():
        returns the capacity of StringBuffer.
    ensureCapacity()
        maintaince a minimum specified capacity of StringBuffer.
    trimToSize()
        removes the empty buffer space for storage by keeping tha capacity as same as length of StringBuffer.
    append()
        adds the specified char/int/long/float/double/boolean/object/string at the last.
    insert()
        inserts the specified char/int/long/float/double/boolean/object/string at the given index.
    delete()
        removes the subsequence from specified start index to end index-1.
    deleteCharAt()
        removes character at specified index.
    setCharAt()
        sets the character at specified index.
    setLength()
        sets the length to specified integer value.
    reverse()
        reverses the sequence of characters in the StringBuffer.
    length()
        returns the number of characters in the StringBuffer.
    charAt()
        returns the character at specified index.
    indexOf()
        returns the index where the specified character or substring presents.
        returns -1 if not not present.
        it can have from index value where search can start from.
    lastIndexOf()
        returns index of the string where the specified character or substring present from the last.
        returns -1 if not not present.
        it can have from index value where search can start from.
    substring()
        returns a string from specified start index to the specified last index-1.
        if there is no last index goes till the end.
    replace()
        returns a string by replacing each old character/substring with new one.

StringBuilder:
    StringBuilder objects are mutable.
    We can change the data once we  create the StringBuilder object.
    The StringBuilder does not overrides the equal().
    All the public methods of StringBuffer are non synchronized.
    It means when one thread is executing a method, another thread can enter the method to execute.
    This feature increases the performance1 as there is no need to wait while one thread is executing the method already.
    But not recommended for the security while working with multiple threads. There may be data inconsistancy occured.
    It has the initial capacity of 16.
    we can increase the capacity manually with ensureCapacity().
    The capacity grows by (old capacity * 2)+2 as length reaches capacity.
    It has the same methods as the StringBuffer but these are non thread safe or non synchronized.
