Collection:
    The representation of inividual objects as a single entity is called Collection.
    Collection is an interface.
    It is root interface Collection framework.
    It defines methods which are applicable for any Collection object.
    THere is no direct concreet class for Collection interface.
    The common methods are 
    add()
        adds specied object to the collection.
    addAll()
        adds all the objects of collection to the current collection.
    remove()
        removes a specified object from the collection.
    removeAll()
        removes all the objects specified in the collection from the current collection.
    retainAll()
        retains or maintains specified collection objects only.
    size()
        returns the number of objects in the collection.
    isEmpty()
        returns true if the there is no object in the collection.
    clear()
        removes all the objects from the collection.
    contains()
        returns true if there is a specified object in the collection.
    iterator()
        returns iterator object for the collection.
    
List:
    List is the interface which extends Collection.
    List represents inividual objects as a single entity where duplicates are allowed and insertion order is preserved.
    List uses indexes to differentiate duplicate objects.
    The order is preserved by the usage of indexes.
    We can insert null.
    There are 3 concreet classes for list interface.
    ArrayList, LinkedList and Vector.
    There are following methods in the list interface.
    add(int index, Object obj)
        adds object at the specified index.
    addAll(int index, Collection collection)
        adds all the objects of specified collection at the specified index.
    containsAll(Collection collection)
        returns true if list contains all the specified collection of objects.
    get(int index)
        returns the object stored in specified index.
    remove(int index)
        removes the object at specified index and retuns the object.
    indexOf(Object obj)
        returns the first index of the specified object.
    lastIndexOf(Object obj)
        returns last index of the specified Object.
    listIterator()
        returns object of listIterator() which is specific to enable the access in the both directions.


    ArrayList:
        ArrayList can store duplicate objects and the insertion order is preserved.
        ArrayList uses growable array data structure.
        It implements RandomAccess interface, We can access an object randomly from specified index with same speed.
        ArrayList is recommended to use when there is a requirement of more retrieval operations.
        It is not recommended to use where frequent operations are insertions and deletions.
        ArrayList methods are non synchronized, that is they are not thread safe and provides high performance.
        we can get synchronized version of ArrayList by using static method synchronizedList() of Collections class.
        THe default capacity is 10, when ArrayList is created.
        It grows as the number of objects stored are increased.
        capacity = old_capacity*3/2+1

    LinkedList:
        LinkedList can store duplicate objects and the insertion order is preserved.
        LinkedList uses double linked list data structure.
        It does not implements RandomAccess interface.
        It is recommended to use when insertions or deletions are frequent operations.
        Not recommended to use when frequent operations are retrieval.
        The methods of LinkedList helps to implement stack and queue.
        addFirst(Object obj)
            adds object at first.
        addLast(Object obj)
            adds at last.
        removeFirst()
            removes first object.
        removeLast()
            removes last object.
        getFirst()
            returns first object.
        getLast()
            returns last object.
    Vector:
        Vector is the legacy class.
        It internally uses growable array data structure.
        It implements RandomAccess interface, The performance is high for retrieval operations.
        Most of the methods are synchronized. When one thread is executing a method another thread will not enter that method.
        Hence performance reduces when working with multiple threads, one has to wait for another thread.
        It provides more security when working with mulple threads as it is thread safe.
        The default capacity is 10, It grows as number of objects increases.
        capacity = old_capacity*2
        addElement(Object obj)
            This methods adds an Object at the last.
        removeElement(Object object)
            removes specified object from the vector.
        removeAllElements()
            removes all objects from vector.
        elementAt(int index)
            returns object at specified index.
        firstElement()
            returns first object of the vector.
        lastElement()
            returns last object of the vector.
        capacity()
            returns capacity of the vector.
        
    Stack:
        Stack is the child class of Vector.
        It is a legacy class.
        It is specially designed for Last in first out order.
        push(Object obj)
            adds the object to the stack.
        pop()
            removes the top object from the stack.
        peak()
            returns top Object from the stack.
        search(Object object)
            returns index of the specified Object.
            If objcet is not available returns -1.

Set:
    Set is the child interface of Collection.
    If we want to represent a collection where duplicates are allowed and insertion order is not preserved, then we can use Set.
    Set interface does not contain any extra methods.
    There is only one direct concreet class HashSet and other Concreet classes of SortedSet,NavigableHashSet is TreeSet.

    HashSet:
        HashSet implements Set interface.
        The underlying data structure is Hash Table.
        The insertion order is not preserved.
        Insertion is done by using Hash functions.
        It does not implements RandomAccess.
        It does not allows duplicate objects.
        It allows null insertion.
        It allows heterogeneous objects.
        If we try to insert duplicates we wont get exception, add() simply returns false.
        Recommended to use if frequent operation is search.
        Its initial capacity is 16 and load factor is 0.75.
        Capacity will be doubled when size reaches capacity*load factor.

    TreeSet:
        It implements NavigableSet interface.
        The underlying data structure is balanced tree.
        Insertion order is not preserved but objects will be stored by using sorted order.
        duplicates are not allowed.
        heterogeneous objects are not allowed.
        We should insert homogeneous and comparable objects, otherwise we will get ClassCastException.
        Null insertion is not possible, if we insert null we will get NullPointerException.
        We can pass our own comparator object or implement Comparable to the constructor to change the sorting order.

Map:
    Map is not a child interface of Collection.
    If we want to Represent a Group of Objects as Key and Value pairs then we can use Map.
    Both Keys and Values are Objects. 
    Duplicate Keys are not allowed.
    Duplicate Values can be allowed.
    Methods are:
    put(Object key, Object value):
        adds the key and value pair to the map.
    putAll(Map m):
        adds all the key-value pairs to the map.
    get(Object key):
        returns the value for the key.
    containsKey(Object key):
        returns true if map contains key.
    containsValue(Object value):
        returns true if map contains value.
    isEmpty():
        returns true if map has no key and values.
    clear():
        removes all the key and values.
    remove(Object key)
        removes specified key and value.
    keySet():
        returns a set of keys.
    values():
        returns a collection of values.
    
    HashMap:
        The Underlying Data Structure is Hashtable.
        Heterogeneous Objects are allowed for Both Keys and Values.
        Insertion Order is not preserved and it is based on hash code of the keys.
        null Insertion is allowed for Key (Only Once) and allowed for Values for any number of times.
        By Default HashMap is Non- Synchronized.
        we can get Synchronized HashMap by using synchronizedMap() of Collections Class.
        Default Initial Capacity 16.
        Default Fill Ratio is 0.75.

    LinkedHashMap:
        It is the child class of HashMap.
        Underlying data structure is HashTable and LinkedList.
        Insertion order is preserved.
        It is same us HashMap for other features.

    TreeMap:
        The Underlying Data Structure is Red-Black Tree.
        Duplicate Keys are Not Allowed.
        But Values can be Duplicated.
        Insertion Order is Not Preserved and it is Based on Some Sorting Order of Keys.
        If we are depending on Default Natural Sorting Order then the Keys should be Homogeneous and Comparable.
        Otherwise we will get Runtime Exception called ClassCastException.
        If we defining Our Own Sorting by Comparator then Keys can be Heterogeneous and Non Comparable.
        Values can be Heterogeneous and Non-Comparable.
        null key cannot be allowed.